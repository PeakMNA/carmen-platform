# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- use 'npx shadcn@latest add' to add a component
- In Next.js 15, dynamic route parameters (`params`) are now Promises that need to be awaited before accessing their properties. Make page components async and await params: `const { id } = await params;`
- Separate server components (for handling params) from client components (for UI and state) in Next.js 15 for better architecture
- When updating API data, ensure the data types match the expected API types (e.g., converting 'maintenance' status to 'inactive' if the API only accepts certain values)
- In Next.js, async/await is only supported in Server Components, not in Client Components (marked with "use client"). Never mark a component with "use client" if it needs to use async/await.
- When implementing user management in business units, filter out platform staff users to prevent them from being added to business units.
- When adding new functionality to an existing component, check for similar implementations in related components to maintain consistency.
- When working with role-based systems, ensure proper validation of system IDs in service methods to prevent unauthorized access.
- For multi-tab interfaces, maintain consistent tab structure and naming conventions across similar components.
- When implementing license management features, ensure proper handling of license limits and provide clear visual indicators when approaching those limits.
- For user-related components, always filter out platform administrators from operations that could affect their access or permissions.
- When displaying distribution metrics, use appropriate visualizations (like progress bars) to make the data more understandable at a glance.
- Include optimization tips and recommendations when implementing resource management features to help users make better decisions.
- When implementing sidebar navigation, ensure that all routes referenced in the sidebar actually exist in the Next.js app structure.
- For tab-based navigation, use URL query parameters (e.g., ?tab=licenses) to allow direct linking to specific tabs and maintain state on page refresh.
- When creating placeholder pages for routes, implement basic functionality that aligns with the overall application design to ensure a consistent user experience.
- When updating feature requirements, ensure consistency between UI components, documentation, and sidebar navigation to maintain a cohesive user experience.
- When working with TypeScript and complex object structures, use type guards to safely access properties. For example, use `isAccountingConfig(config)` to check if an object has the properties of an AccountingConfig before accessing those properties.
- When defining TypeScript interfaces with index signatures, ensure that the specific properties are compatible with the index signature type. Consider using union types or type assertions when necessary.
- Use the `unknown` type instead of `any` for better type safety in TypeScript, especially when working with data from external sources or when the exact type is not known at compile time.
- When using TypeScript with React components, ensure that props like `defaultValue` and `defaultChecked` have the correct types as expected by the component library (e.g., string, number, or CheckedState).
- Create reusable UI components in separate files to improve code organization and type safety. For example, create a DataTable component in its own file with proper TypeScript types instead of using inline components with `any` types.
- When converting between different type systems (e.g., from a library's types to your own), use type assertions with caution and provide proper type narrowing to maintain type safety.
- When fixing ESLint errors, group similar issues together and address them systematically to avoid introducing new issues.
- For unescaped entities in JSX (like apostrophes), replace them with their HTML entity equivalents (`&apos;` or `&#39;`) to avoid React warnings.
- Remove unused imports and variables to keep the codebase clean and improve build performance.
- Replace empty interfaces with more specific types or extend existing interfaces to provide better type safety.
- Avoid using `any` type in TypeScript and instead use more specific types or `unknown` with type guards.
- In Next.js 15 API routes, the params object is a Promise that needs to be awaited before accessing its properties. Use the correct type: `{ params: Promise<{ paramName: string }> }`.
- When handling form data with complex nested objects, ensure the handleChange function can accept both string and object values.
- When using third-party libraries like next-themes, check the correct type definitions and consider defining your own types if the library's types are not accessible.
- For toast notifications, understand that the toast function doesn't have a dismiss method directly attached to it. Use the dismiss method from the useToast hook instead.

# Scratchpad

## Current Task: Fix ESLint Errors for Successful Build

### Task Description
Fix the ESLint errors that are preventing a successful build of the Carmen Platform.

### Implementation Steps
[X] Fix unescaped entities (apostrophes)
  [X] src/app/(auth)/forgot-password/page.tsx
  [X] src/components/dashboard/DashboardHeader.tsx

[X] Fix unused imports and variables
  [X] src/app/(dashboard)/admin/clusters/add/page.tsx - Remove unused 'Textarea'
  [X] src/app/(dashboard)/admin/reports/layout.tsx - Remove unused imports
  [X] src/app/api/reports/route.ts - Remove unused 'db' and 'error'
  [X] src/components/auth/ForgotPasswordForm.tsx - Remove unused 'error'
  [X] src/components/auth/LoginForm.tsx - Remove unused 'error'
  [X] src/components/auth/RegisterForm.tsx - Remove unused 'error'
  [X] src/components/forms/ContactForm.tsx - Remove unused 'error'
  [X] src/components/reports/ReportDetails.tsx - Remove unused 'useState'
  [X] src/components/reports/SelectedReportsPreview.tsx - Remove unused 'onConfigChange'
  [X] src/components/reports/TemplateDistribution.tsx - Remove unused 'selectedTenants'
  [X] src/components/settings/SettingsForm.tsx - Remove unused 'Button'

[X] Fix empty interface declarations
  [X] src/components/dashboard/QuickActions.tsx
  [X] src/components/dashboard/RecentActivity.tsx

[X] Fix variables assigned but only used as types
  [X] src/components/ui/use-toast.ts - Fix 'actionTypes'
  [X] src/hooks/use-toast.ts - Fix 'actionTypes'

[X] Fix explicit 'any' types
  [X] src/components/reports/SelectedReportsPreview.tsx - Replace 'any' with specific type

[X] Fix type errors in API routes
  [X] src/app/api/business-units/[businessUnitId]/users/[userId]/roles/route.ts - Fix params type
  [X] Update API route handlers to use the correct Promise type for params
  [X] Add proper await for params in all API route handlers
  [X] Fix method names in user role management API to match service methods

[X] Fix type errors in form handling
  [X] src/app/(dashboard)/admin/clusters/add/page.tsx - Fix handleChange function
  [X] src/components/clusters/AddBusinessUnitSheet.tsx - Fix form data transformation

[X] Fix theme provider type errors
  [X] src/components/theme-provider.tsx - Fix ThemeProviderProps type

[X] Fix toast notifications
  [X] src/lib/notifications.ts - Fix toast.dismiss() usage

[X] Update the CHANGELOG.md to document the fixes
[X] Test the build after fixing the errors

### Next Steps
[X] Commit the changes with a descriptive message

## Current Task: Implement User Management in Business Units

### Task Description
Add user management capabilities to the business unit edit page, allowing users to be added to business units with specific roles, except for platform staff.

### Implementation Steps
[X] Create BusinessUnitEditUsers component
  [X] Implement user listing functionality
  [X] Add user role management
  [X] Implement user filtering (exclude platform staff)
  [X] Add role distribution visualization

[X] Update EditBusinessUnitClient component
  [X] Add Users tab to the tab list
  [X] Add BusinessUnitEditUsers component to the tab content

[X] Update userService
  [X] Add support for "carmen-platform" system ID

[X] Update documentation
  [X] Update CHANGELOG.md with new features
  [X] Update .cursorrules with learnings

### Next Steps
[X] Test the implementation
  [X] Verify user listing works correctly
  [X] Test adding users to business units
  [X] Test removing users from business units
  [X] Verify role distribution visualization

## Current Task: Implement Subscription License Management

### Task Description
Add license management capabilities to the subscription menu, allowing administrators to assign and manage user licenses with different license types.

### Implementation Steps
[X] Create SubscriptionLicenseManagement component
  [X] Implement license assignment functionality
  [X] Add license type selection
  [X] Implement license utilization visualization
  [X] Add license distribution analytics
  [X] Provide optimization recommendations

[X] Update Subscriptions page
  [X] Add tabbed interface for license management
  [X] Integrate SubscriptionLicenseManagement component
  [X] Add navigation between overview and license management

[X] Update documentation
  [X] Update CHANGELOG.md with new features
  [X] Update .cursorrules with learnings

### Next Steps
[X] Test the implementation
  [X] Verify license assignment works correctly
  [X] Test removing licenses from users
  [X] Verify license utilization visualization
  [X] Test license distribution analytics

## Current Task: Implement Business Unit Configuration

### Task Description
Create a detailed Business Unit configuration page that allows for managing module activation, license allocation, and user management for a specific business unit.

### Implementation Steps
[X] Create BusinessUnitDetailPage component
  [X] Implement module activation functionality
  [X] Add module-specific configuration options
  [X] Implement user management interface
  [X] Add license allocation visualization
  [X] Implement expiration settings

[X] Create module configuration types
  [X] Define interfaces for different module types
  [X] Create base module configuration interface
  [X] Implement type-safe module configuration access

[X] Update documentation
  [X] Update CHANGELOG.md with new features
  [X] Update .cursorrules with progress

### Next Steps
[ ] Test the implementation
  [ ] Verify module activation works correctly
  [ ] Test module configuration options
  [ ] Verify user management interface
  [ ] Test license allocation visualization
  [ ] Verify expiration settings

## Current Task: Simplify Billing Page and Focus on Hotel Invoices

### Task Description
Remove payment method management from the billing page, update the PRD to reflect the simplified billing approach, and refocus the page on hotel invoice management.

### Implementation Steps
[X] Update billing page
  [X] Remove payment method tab and section
  [X] Focus on hotel invoice management
  [X] Add filtering capabilities for hotel invoices
  [X] Improve invoice display and organization

[X] Update subscription PRD
  [X] Remove references to payment methods
  [X] Update billing section to focus on invoice management
  [X] Update financial system integration section

[X] Update sidebar navigation
  [X] Rename "Billing" to "Hotel Invoices" to match content

[X] Update documentation
  [X] Update CHANGELOG.md with changes
  [X] Update .cursorrules with learnings

### Next Steps
[ ] Test the implementation
  [ ] Verify invoice listing and filtering works correctly
  [ ] Test export functionality
  [ ] Verify billing information display

## Current Task: Update Subscription PRD with Text Results Display

### Task Description
Add detailed information about the subscription model structure, license validation logic, and sample reports to the PRD.

### Implementation Steps
[X] Update subscription PRD
  [X] Add Subscription Controlling Platform - Text Results Display section
  [X] Include Subscription Model Structure with core components
  [X] Add License Validation Logic with detailed validation flow
  [X] Include Sample License Report Output with business units summary
  [X] Add Sample User Access Matrix showing access by user type
  [X] Include Sample Module Activation Report with usage statistics
  [X] Add System Notification Examples for license warnings and insights

[X] Update documentation
  [X] Update .cursorrules with the new task
  [X] Update CHANGELOG.md with the PRD changes

[X] Implement changes based on the new PRD
  [X] Update User types to include BU Staff and Cluster User types
  [X] Modify the SubscriptionLicenseManagement component to handle both user types
  [X] Add support for module activation per business unit
  [X] Update license utilization visualization with separate progress bars
  [X] Update the Subscription interface to include new properties
  [X] Update the subscription overview page to reflect the new model
  [X] Enhance the license management dashboard with summary cards
  [X] Add cluster information display
  [X] Add filtering capabilities to the license management interface
  [X] Improve warning indicators for approaching license limits
  [X] Update the subscription plans page to align with the new model

### Next Steps
[ ] Review the updated PRD for consistency with existing content
[ ] Ensure all tables and formatting are displayed correctly
[ ] Consider adding visual representations of the license validation flow
[ ] Test the implementation with different user types and module configurations
[ ] Update the SubscriptionLicenseManagement component to handle the new filter props

# Lessons

## User Roles & Responsibilities

#### Platform Administrator
**Role**: Overall platform management and configuration
**Tasks**:
- Manage tenant provisioning and configuration
- Monitor platform health and performance
- Configure global security policies
- Manage platform-wide settings
- Handle system upgrades and maintenance
- Monitor resource utilization
- Generate platform-wide reports

#### Tenant Administrator
**Role**: Manage specific tenant environment
**Tasks**:
- Configure tenant-specific settings
- Manage users within the tenant
- Assign roles and permissions
- Monitor tenant resource usage
- Handle tenant-specific configurations
- Generate tenant-level reports
- Manage tenant security settings

#### Business Unit Manager
**Role**: Manage specific business unit within a tenant
**Tasks**:
- Manage team members
- Assign team roles
- Monitor unit performance
- Handle resource allocation
- Generate unit-level reports
- Configure unit-specific settings
- Manage access controls

#### Support Manager
**Role**: Oversee support operations
**Tasks**:
- Manage support ticket workflow
- Assign tickets to support staff
- Monitor support performance
- Maintain knowledge base
- Generate support reports
- Handle escalations
- Train support staff

#### Support Staff
**Role**: Handle day-to-day support operations
**Tasks**:
- Process support tickets
- Update ticket status
- Document solutions
- Contribute to knowledge base
- Assist users with issues
- Follow up on resolved tickets
- Escalate complex issues

#### Regular User
**Role**: Use platform features within assigned permissions
**Tasks**:
- Access assigned resources
- Submit support tickets
- Use platform features
- Update profile settings
- View relevant reports
- Follow security policies
- Access documentation

#### Security Officer
**Role**: Ensure platform security and compliance
**Tasks**:
- Monitor security alerts
- Review audit logs
- Enforce security policies
- Handle security incidents
- Conduct security audits
- Generate compliance reports
- Update security documentation

#### Integration Developer
**Role**: Handle platform integrations
**Tasks**:
- Manage API integrations
- Configure webhooks
- Monitor integration health
- Handle integration issues
- Document integration points
- Optimize performance
- Maintain integration security

### Access Level Hierarchy
1. Platform Level
   - Platform Administrators
   - Security Officers

2. Tenant Level
   - Tenant Administrators
   - Business Unit Managers

3. Operational Level
   - Support Managers
   - Support Staff
   - Integration Developers

4. User Level
   - Regular Users
   - Limited Access Users

### Permission Inheritance
- Platform Admin → Full Access
- Tenant Admin → Tenant-wide Access
- Business Unit Manager → Unit-wide Access
- Support Manager → Support System Access
- Regular User → Feature-based Access

### Role Assignment Rules
1. Role Separation
   - Clear separation of duties
   - No conflicting permissions
   - Documented role assignments

2. Access Control
   - Least privilege principle
   - Time-based access
   - Location-based restrictions

3. Audit Requirements
   - Role changes logged
   - Permission updates tracked
   - Access attempts recorded